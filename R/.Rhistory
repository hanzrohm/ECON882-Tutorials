### Loading Libraries ###
library(ISLR)
library(tidyverse)
library(rsample)
library(glmnet)
# pls library for principal component regression
library(pls)
### Principal Components ###
# Loading a Dataset
df = data.frame(Auto)
# Splitting the sample
df_split = initial_split(data = df, prop = 0.7)
df_train = training(df_split)
df_test = testing(df_split)
set.seed(5)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0)
# Comparing to LASSO results
X_train = model.matrix(mpg ~ displacement + horsepower + weight + acceleration -1 ,data = df_train)
y_train = as.matrix(df_train[,'mpg'])
X_test = model.matrix(mpg ~ displacement + horsepower + weight + acceleration -1 ,data = df_test)
y_test = as.matrix(df_test[,'mpg'])
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0)
plot(lasso_reg_cv)
lmin = lasso_reg_cv$lambda.min
lmin
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0.001)
plot(lasso_reg_cv)
lmin = lasso_reg_cv$lambda.min
lmin
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0)
plot(lasso_reg_cv)
lmin = lasso_reg_cv$lambda.min
lmin
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
lmin = lasso_reg_cv$lambda.min
lmin
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
set.seed(5)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
set.seed(5)
lasso_reg_cv = cv.glmnet(X_train,y_train,family='gaussian',alpha=1,lambda.min=0,nlambda=1000)
plot(lasso_reg_cv)
lmin = lasso_reg_cv$lambda.min
lmin
lasso_pred = predict(lasso_reg_cv,X_test)
mean((lasso_pred - df_test[,'mpg'])^2)
set.seed(5)
pcr_fit = pcr(mpg ~ displacement + horsepower + weight + acceleration,data = df_train ,scale = TRUE, validation = "CV")
summary(pcr_fit)
validationplot(pcr_fit,val.type = 'MSEP')
pcr_pred = predict(pcr_fit,df_test,ncomp = 2)
mean((pcr_pred - df_test[,'mpg'])^2)
rm(list=())
